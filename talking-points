
Hey,
my name is
infra team
i was encourage
the story of tron
how many people have heard of Tron


Tron is a system we use here at yelp
for running batches and services
created here, by the infra team circa 2009
cron was no longer meeting our requirements
the plan was to build
using twisted and yaml


fast forward a couple years
yelp is now widely used for batches and services
it's an open source project, and it has a couple users outside of yelp 
my story with Tron starts about 4 months ago
i had recently joined the infra team
and I heard that Tron was going to be moving 
back under the infra umbrella


at the time, 
I felt like the general consensus
was that Tron needed a lot of work
For the most part it was functioning properly
there were definitely some rough edges,
some parts needed to be completely refactored
I was excited to hear this
I eagerly volunteered to work on the project
tron was open source
it needed a lot of work
and it was an opportunity to refactor code into design patterns
all of this sounded great to me
so i did a bit of digging,
i met with some people who had more experience with tron
and got an idea for what the major blockers were


I learned that Tron had a few components


a job scheduler
at its core, the same essential idea as cron
letting you schedule a time for a process to run
it also allows you to run the job on a remote machine
has dependency management
and keeps track of each run
so that if a new one starts before the previous one ends
it can either cancel or queue the new run
in Tron terminology
a Job is a collection of actions
an action identifies the process to run


service monitor
starts and stop services, daemons
each service can be configured to run on any number of remote machines
each service can also have multiple instances
when a service fails, it can be configured to restart
and tron will run the daemon again


configuration management
loads a yaml config file filled with nodes, jobs and services
parses the config, and sets up the tron daemon
and there was a command line tool called tronfig 
to upload new configs while tron was running


state serialization
api for tron commands (tronview, tronctl, tronfig)


so what was causing problems?
when no jobs or services failed, and tron wasn't restarted everything was mostly fine
- restarting tron for upgrades and failing jobs could cause tron to get into weird states
- the configuration was a little verbose
- and would complain when new configurations were pushed


so I got to work
my objectives was/is no different then any other project I work on
I'd try to leave the code base in a better condition then when i got there
i want the code to be more enjoyable to work with
- reliable test that run fast, and have good coverage
- code that is easy to read and understand
smaller blocks are easier to understand
i wanted Tron to be more stable and easier to user and administrate


so what did i do, and how did i do it?
i started refactoring things into smaller classes
and into design patterns
for me, design patterns are the most interesting part of programming
i know there is not really a consensus on the benefit of design patterns
i've read some people say that they make code overly complex
in my experience they've always made things easier to understand
i think there is definitely a wrong way to use patterns
trying to make your code fit into a pattern is the wrong approach
the idea is to find the pattern that use code is using anyways
and formalize it


design patterns come from practical experience
they're codified over many years by veteran programmers
so we don't have to repeat the same mistakes they did
I won't bore you with every pattern I've used in Tron
but let's take a look at a couple key patterns


observer
behavioural pattern
very useful with event loops, which is why tron uses it
there are two classes which collaborate
the observer is like the parent object
it needs to know when the child changes it's state
but it shouldn't have to ask
so it calls watch, with the child as an argument
the observable is the child
it allows observers to attach to it
and sends a notify when it's state changes


factory
is a creational pattern
it's great for constructing objects which have many requirements
allowing you to keep your constructor simple
makes testing these classes a lot easier, way less patching
reduces coupling between when you need to build one object from another


collection
i first saw this pattern in backbone.js
it's useful when you have a data structure of objects
and you want to be able to operate on all the objects at once
or possible filter the data structure in different ways
very useful in tron because there are many collections of objects


template
common behavioural pattern
this is used in a few places in tron
it's also the central pattern for MDBatch and ForEach
the idea is to outline the template of an operation in the base class
and provide extension points for each step
then subclasses can override each extension point 
to customize the operation
this example is from the configuration validation


in addition to design patterns, I think style is important
style increases readability, 
think syntax highlighting
it makes the code base more inviting,
which in turn makes it more enjoyable to work with
which leads to more quality work being done
so what are some style issues I like to address


whitespace and structure
...
max character per lines is still important
i had a prof which claimed that if you're going over...
you're doing something wrong
too much indentation
your naming is too verbose
an exception is error messages and long strings
guard statements and flow
code doesn't have to look like an arrow, 
guard statements make it much easier to reason about


naming
naming is a hard problem
it's more of an art
when I'm choosing names I try to make it human readable when it's used
the context can help keep variable names short
no reason to repeat the name of the class in every variable name
using expected names can help a lot
appropriate specificity is the idea that a very general class
like a data structure
should have a very general name
where as a very specific class, like  a business logic class
should have a specific name


code over comments
comments are primarily useful for creating API docs
code should self document
docstrings and module headers are an exception


keep it short
short code is more re-usable because it will only do a single thing
code that does more then a single thing is a lot less likely to be re-used
short code is easier to understand and reason about


then there are a few things, that don't really fit into style
or design patterns
but i think are key guidelines for clean code
- code to an interface
a clean interface will result in a cleaner implementation
implementation is easier to change,
interface is a lot more work
- abstraction layers
a great way to make code less complicated
each layer has a single concern
- reduce complexity
i also think test quality is very important
fast tests
test each abstraction layer independently
sumeet has already covered all this in an earlier learning group


so what is next for Tron?
- always more refactoring
- the next release
- future features


Where to learn more
